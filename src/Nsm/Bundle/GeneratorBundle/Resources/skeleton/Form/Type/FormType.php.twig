<?php

namespace {{ bundle_namespace }}\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

/**
 * {{ entity_english_name }} Form Type
 */
class {{ entity_name }}Type extends AbstractType
{
    /**
     * @param FormBuilderInterface $builder
     * @param array                $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {

{%- for field in meta_data.fieldMappings %}
{%- if field.fieldName != 'id'  %}
{# Double line carriage return here to put one line buffer between $builder calls #}


        $builder->add(
            '{{ field.fieldName }}',
            '{{ field.type == 'string' ? 'text' : field.type }}',
            array(
                'label' => '{{ field.fieldName }}',
                'required' => {{ field.nullable is defined and field.nullable  ? "false" : "true" }},
            )
        );
{%- endif %}
{%- endfor %}
{%- for field in meta_data.associationMappings %}
{% if field.type == 4 %}

        // One To Many
        $builder->add(
            '{{ field.fieldName }}',
            'collection',
            array(
                'label' => '{{ field.fieldName }}',
                'type' => new {{ field.targetEntity|split('\\')|last }}Type,
                'options' => array(
                    'by_reference' => false,
                    'error_bubbling' => false,
                    'prototype' => true,
                    'allow_add' => true,
                    'allow_delete' => true
                )
            )
        );
{% elseif field.type == 2 %}

        // Many To One
        $builder->add(
            '{{ field.fieldName }}',
            'entity',
            array(
                'label' => '{{ field.fieldName }}',
                'class' => '{{ bundle_name }}:{{ field.targetEntity|split('\\')|last }}',
                'property' => 'id',
                'query_builder' => function (\{{ bundle_namespace }}\Entity\{{ field.targetEntity|split('\\')|last }}Repository $repo) {
                    $qb = $repo->createQueryBuilder('{{ field.targetEntity|split('\\')|last }}');

                    return $qb;
                }
            )
        );
{%- endif %}

{%- endfor %}

    }

    /**
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(
            array(
                'data_class' => '{{ bundle_namespace }}\Entity\{{ entity_name }}',
                'cascade_validation' => true,
                'error_bubbling' => false,
            )
        );
    }

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ entity_variable_name }}';
    }
}
