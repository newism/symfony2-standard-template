<?php

namespace {{ namespace }}\EventSubscriber{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\EventSubscriber;
use Doctrine\ORM\Event\OnFlushEventArgs;
use Doctrine\ORM\Event\PreFlushEventArgs;
use Doctrine\ORM\Events;
use {{ namespace }}\Entity\{{ entity }};
use {{ namespace }}\Entity\{{ entity }}Manager;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% endblock use_statements %}

/**
{% block phpdoc_class_header %}
 * {{ entity }} subscriber.
{% endblock phpdoc_class_header %}
 *
{% block phpdoc_class_annotations %}
{% endblock phpdoc_class_annotations %}
 */
{% block class_definition %}
class {{ entity_class }}Subscriber implements EventSubscriber
{% endblock class_definition %}
{
{% block class_body %}
    protected $container;

    /**
     * Constructor
     *
     * @param ContainerInterface $container
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }


    /**
     * @return array
     */
    public function getSubscribedEvents()
    {
        return array();
    }
{% endblock class_body %}
}
