
    /**
     * Browse all {{ entity }} entities.
     *
     * @View(templateVar="entities", serializerGroups={"{{ route_name_prefix }}_browse"})
     *
     * @QueryParam(name="page", requirements="\d+", default="1", strict=true, description="Page of the overview.")
     * @QueryParam(name="perPage", requirements="\d+", default="100", strict=true, description="{{ entity }} count limit")
     *
     * @ApiDoc(
     *  resource=true,
     *  filters={
     *      {"name"="title", "dataType"="string"},
     *      {"name"="project", "dataType"="integer"},
     *      {"name"="page", "dataType"="integer"},
     *      {"name"="perPage", "dataType"="integer"},
     *      {"name"="orderBy", "dataType"="string", "pattern"="(title|createdAt) ASC|DESC"}
     *  })
     */
    public function browseAction(Request $request, $page, $perPage)
    {
        $em = $this->getDoctrine()->getManager();
        /** @var {{ entity }}Repository $repo */
        $repo = $em->getRepository('NsmApiBundle:{{ entity }}');

        $dateRange = new DateRange(new \DateTime('first day of this month'), new \DateTime('last day of this month'));
//        $tasks = $this->get('task.repository')->findBy(
//            [
//                'id' => [1, 2, 3]
//            ]
//        );

        /** @var Form ${{ variable_name }}SearchForm */
        ${{ variable_name }}SearchForm = $this->createForm(
            new {{ entity }}FilterType(),
            array(
//                'title' => 'foo',
//                'task' => $tasks,
//                'startedAtRange' => $dateRange
            ),
            array(
                'action' => $this->generateUrl('{{ route_name_prefix }}_browse'),
                'method' => 'GET'
            )
        );

        ${{ variable_name }}SearchForm->add('search', 'submit');

        ${{ variable_name }}SearchForm->handleRequest($request);
        $criteria = $repo->sanatiseCriteria($activitySearchForm->getData());

        $qb = $repo->filter($criteria);

        $pager = $this->paginateQuery($qb, $perPage, $page);
        $results = $pager->getCurrentPageResults();
        $responseData = array();

        if (true === $this->getViewHandler()->isFormatTemplating($request->getRequestFormat())) {
            $responseData['pager'] = $pager;
            $responseData['search_form'] = $activitySearchForm->createView();
        } else {

//            $paginatedCollection = new PaginatedRepresentation(
//                new CollectionRepresentation(
//                    (array) $pager->getCurrentPageResults(),
//                    '{{ variable_name }}', // embedded rel
//                    '{{ variable_name }}' // xml element name
//                ),
//                '{{ route_name_prefix }}_browse', // route
//                array(), // route parameters
//                $pager->getCurrentPage(),
//                $pager->getMaxPerPage(),
//                $pager->getNbPages()
//            );

            $pagerfantaFactory = new PagerfantaFactory();
            $paginatedCollection = $pagerfantaFactory->createRepresentation(
                $pager,
                new Route('{{ route_name_prefix }}_browse', array())
            );

            $responseData = $paginatedCollection;
        }

        $view = $this->view($responseData);
        $view->setTemplate($this->getTemplate($request->query->get('{{ route_name_prefix }}_template', 'browse')));

        return $view;
    }
